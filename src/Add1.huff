
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)
#define macro ADD1() = takes (0) returns (1) {  
    0x04 calldataload // load first 32 bytes onot stack except the function selector
    0x01                // load 1 onoto stack
    add                 // add 2 stack top values
    0x00 mstore         // place stack top value at mem location 00
    0x20                // load the length  
    0x00                  // load the offset  
    return                  // return the mem
}

#define macro MAIN() = takes(0) returns(0) { 
    0x00 calldataload 0xe0 shr      
    dup1 __FUNC_SIG(add1) eq add1 jumpi  

    0x00 dup1 revert
    add1:
        ADD1()

  

}
